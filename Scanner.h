// Scanner.h
#ifndef COMPC___SCANNER_H
#define COMPC___SCANNER_H
#include "Lexeme.h"
using namespace std;

class Scanner {
private:
    // Буфер для хранения текста, который нужно анализировать. 
    // Используется для работы с содержимым исходного файла.
    TypeMod t;

    //char t[MAX_TEXT]; // исходный текст

    // Указатель текущей позиции в буфере `t`.  
    // Показывает, на каком символе сейчас находится анализ.
    int uk = 0;

    FILE* in;

    // Текущая позиция символа в строке (по горизонтали).  
    // Используется для вывода ошибок и предупреждений с указанием местоположения.
    int pos;

    // Текущий номер строки в анализируемом тексте.  
    // Также используется для указания местоположения ошибок или предупреждений.
    int line;

    // Временная переменная для хранения значения позиции `pos`.  
    // Используется при возврате к предыдущей позиции в случае необходимости.
    int tmpPos;
    
    // Временная переменная для хранения значения строки `line`.  
    // Используется аналогично `tmpPos` для возврата строки.
    int tmpLine;

    int pointer;


    // Проверяет, является ли символ десятичной цифрой (0-9). 
    // Аргумент: символ ch. Возвращает true, если это цифра, иначе false.
    static bool isDigit(char ch);

    // Проверяет, является ли символ шестнадцатеричной цифрой (0-9, A-F, a-f). 
    // Аргумент: символ ch. Возвращает true, если это цифра, иначе false.
    static bool isDigit16(char ch);

    // Проверяет, является ли символ буквой (a-z, A-Z) или подчеркиванием (_). 
    // Аргумент: символ ch. Возвращает true, если это буква/подчеркивание, иначе false.
    static bool isLetter(char ch);

public:
    int PPP();

    // Переходит на новую строку, сбрасывая позицию. 
    // Аргументы отсутствуют. Не возвращает значения.
    void newLine();
    
    // Основная функция сканирования, анализирует текущую позицию в тексте и определяет тип лексемы. 
    // Аргумент: лексема (lex), куда сохраняется найденное значение. 
    // Возвращает тип лексемы (type).
    int scanner(TypeLex typeLex);
    
    // Считывает содержимое входного файла в массив t. 
    // Аргумент: имя файла FileName. Не возвращает значения. При ошибке завершает выполнение программы.
    void getData(const char*);

    void getData(FILE* in);

    // Конструктор класса Scanner. Принимает имя входного файла (fileName) для анализа. 
    // Инициализирует указатель (uk) и позицию (pos, line) в исходном тексте.
    Scanner(FILE* in);
    Scanner(const char*);
    ~Scanner() = default;

    // Выводит сообщение об ошибке с указанием строки, позиции и типа ошибки. 
    // Аргументы: тип ошибки (typeErrors) и лексема (lex). Завершает выполнение программы.
    void printError(int typeErrors, TypeLex lex);
    void printError(string errorMessage, string lexeme);

    // Выводит предупреждение с указанием строки и позиции. 
    // Аргумент: тип ошибки (typeErrors). Не возвращает значения.
    void printWarning(int typeErrors);

    // Устанавливает текущую позицию в строке. 
    // Аргумент: новая позиция (_pos). Не возвращает значения.
    void setPos(int _pos);

    // Возвращает текущую позицию в строке. 
    // Аргументы отсутствуют. Возвращает позицию.
    int getPos();

    // Устанавливает указатель на текущую позицию и обновляет строки и позиции. 
    // Аргумент: новая позиция указателя (i). Не возвращает значения.
    void setUK(int i);

    // Возвращает текущий указатель позиции и сохраняет временные значения строки и позиции. 
    // Аргументы отсутствуют. Возвращает значение указателя.
    int getUK();

    void putPointer(int i);
    int getPointer();

    // Устанавливает текущий номер строки. 
    // Аргумент: новый номер строки (_line). Не возвращает значения.
    void setLine(int _line);

    // Возвращает текущий номер строки.
    // Аргументы отсутствуют. Возвращает номер строки.
    int getLine();

    // Выводит сообщение об ошибке. 
    // Аргумент: сообщение об ошибке error. Завершает выполнение программы.
    void printError(const string& error);

    // Выводит сообщение об ошибке с информацией о строке и позиции, связанной с лексемой. 
    // Аргументы: сообщение об ошибке (error) и лексема (lex). Завершает выполнение программы.
    void printError(string error, char* lex);
};
#endif COMPC___SCANNER_H
